Design Decisions

	One major design decision we made was in Catalog.java, where we added a private class Table as a wrapper to contain file, name, and 
	pKeyField information. We could have instead used maps or concurrent lists to keep track of everything, but this choice ensured no 
	mismatch in list length. Additionally the precedent set by the existence of the TDItem class in TupleDesc.java made us feel secure 
	in our decision.

Changes in API

	We made no changes to the API

Missing or Incomplete elements of our code

	n/a

Who worked on what
	Dylan (cs186-nn) initially worked on TupleDesc, Tuple, Catalog, BufferPool, HeapPageId, RecordId, and HeapFile
	Henry (cs186-jj) initally worked on HeapPage and SeqScan, rewrote TupleDesc, and implemented incomplete methods in the other files

Time spent

	25 man hours in total (setting up VM, logisistics, coding, etc)

Confusing things

	Procedure in TupleDesc.java for handling when fieldAr contained null strings. Originally we followed the instructions in the javadoc
	(and Piazza post 80) ,but when we got to SeqScan.java, it seemed like instead of naming fields "" when a null string was given for
	the name, it wanted us to return the string "null". We asked a question on Piazza, but the response just told us to return "", so 
	that's what we did. In either case, we passed every test we tried.

	If mismatching arrays are input to the constructor of TupleDesc, we weren't sure on the correct procedure. We ended up truncating
	the names array if it was longer, and padded the names array if the field array was longer. Later, an instructor answered a post
	on Piazza saying that we could assume they were the same length.